TBD
---
XXX search for 2015, put date at top of doc

TABLE OF CONTENTS
=================


INTRODUCTION
============

In order to learn more about Linux and Android I decided to develop this 
Webcam Software. 

The key program requirements are:
  - view multiple webcams simultaneously
  - view live and recorded data
  - viewer program communicates directly to webcam servers
  - viewer program runs on either Linux or Android
  - develop in C language

I've been very impressed with the amount of information, sample code, and 
libraries that are freely available. 

I believe that there is useful sample code in what I have developed. I am 
posting this so you can try out this webcam software, or use this as sample
code for your programs.


REFERENCES
==========

XXX organize ...

- http://www.rackspace.com/ 
  The admin_server (described in following sections) runs on a Fedora 19 
  Rackspace VM. The admin_server needs to run on a system with a public IP address.

- http://dyn.com/dns/ 
  Dyn DNS provides DNS name for the Rackspace system

- https://getfedora.org/ 
  Fedora 20 is my devlopment system. Also the viewer program runs on Fedora20.

- https://en.wikipedia.org/wiki/UDP_hole_punching
  http://www.rapapaing.com/blog/?p=24
  Direct Peer to Peer network connection uses UDP Hole Punching

- http://linuxtv.org/downloads/v4l-dvb-apis/ 
  Video for Linux Two API spec. This describes the IOCTLS used to read 
  frames from /dev/video.

- http://www.fourcc.org/yuv.php 
  YUV Pixel Formats

- http://www.libsdl.org/
  http://www.libsdl.org/projects/SDL_mixer/
  https://www.libsdl.org/projects/SDL_ttf/
  Simple Direct Media Layer is a cross platform development library.
  SDL supports Windows, Mac OS X, Linux, iOS, and Android.
  SDL_mixer is for audio, SDL_ttf are fonts.

- http://www.soundjay.com
  Free Sound Effects

- http://developer.android.com/sdk/index.html  
  Android Developer Tools

- https://wiki.libsdl.org/Android
  Building SDL2 for Android.

- https://github.com/kmackay/android-ifaddrs/blob/master/ifaddrs.c
  An implementation of getifaddrs() for Android, since the NDK 
  does not natively support it.

- https://tools.ietf.org/html/rfc4330  
  Simple Network Time Protocol RFC

- http://stackoverflow.com/  
  Question and Answer Site for Programmers

- http://raspberrypi.org/downloads
  Raspberry Pi OS Images. I used Raspbian.

- https://github.com/raspberrypi/linux/issues/618
  USB patch for Raspberry PI, to improve Webcam reliability.

- http://choosealicense.com/licenses/
  I use the MIT License - A permissive license that is short and to the point. 
  It lets people do anything with your code with proper attribution and 
  without warranty.

XXX jpeg

DESIGN
======

XXX

BUILD ON LINUX
==============

I use Fedora 20 on a Dell Inspiron Desktop, with 64 bit Intel Core i3 processors. 

I have only tested with the Logitech C300 1.3-MP Webcam. I expect that some tweaks to
cam_init_webcam() may be needed to work with other webcams.

Steps:
- download this software to ~/proj_cam (or another directory you choose)
- install additional packages
    yum install SDL2-devel SDL2_ttf-devel SDL2-mixer-devel
    yum install libjpeg-turbo-devel
    yum install readline-devel
- build the software
    cd ~/proj_cam
    make

The following programs should have been built:
  admin
  admin_server
  loginwc
  nettest_to_admin_server
  nettest_to_wc
  viewer
  wc_server

I currently (Jan 2015) am providing an admin_server running on sthaid-rs.dyndns.org.
The software you just built will use this admin_server.

What you should be able to do now is:

- run the admin program and log in as demo
    $ admin -u demo -p demo
    demo> ls
    st_backyard  demo         online  steve.backyard
    demo> exit

- run the viewer program, it is pre-initialized to login as 
  demo and display the st_backyard webcam
    $ viewer

- plugin your own webcam, preferably Logictech C300 because that is all I've tested
  - verify /dev/video0 exists
  - run wc_server in the background, and check wc_server.log for errors
  - create an account and add your webcam to your account
      $ admin -c -u myacct -p mypasswd
      account myacct created
      $ admin -u myacct -p mypasswd
      myacct> ls unclaimed
      ---          ---          online  90:48:9a:41:7b:41                      
      myacct> add_wc mywebcam  90:48:9a:41:7b:41 
      myacct> ls 
      mywebcam     myacct       online  90:48:9a:41:7b:41                      
      myacct> exit
   - run viewer
      . click CONIFG and set your username and password, 
      . click <none> in one of the 4 panes, and click mywebcam


BUILD AND INSTALL WC_SERVER ON A RAPSBERRY PI
=============================================

Instead of attaching the Webcam to your desktop computer, you can use a
small low cost computer. I use the Raspberry Pi.

I purchased the following in March 2014:
- CanaKit Raspberry Pi (Model B) Complete Starter Kit
- Logictech C300 Webcam
- Edimax 150 Mbps Wireless 802.11bgn nano USB Adapter
- EasyAcc US 5V 2A Universal Travel AC Micro USB Wall Charger Adapter

The CanaKit does contain a power supply, however at the time I purchased
this the CanaKit power supply was just 1A, I believed that a power adaper
with more current capacity would be more reliable, which is why I purchased
the 2A power adapter. FYI, the current CanaKit has a Raspberry PI B+ with 
a 2.5A power supply.

I did not need to purchase a powered USB hub, the Logictech C300 and 
Edimax Wireless USB adapter work fine receiving power from the Raspberry Pi.

Steps ...

- Assemble and install your Raspberry Pi. 
  I used the Raspbian OS image from raspberrypi.org/downloads.
  - be able to ssh to the pi account
  - check date, time, and tz are correct
  - update pi account password, if desired

- login to pi account and create ~/proj_cam

- sudo vi /etc/rc.local, and add the following so that the wc_server
  will automatically start when the Raspberry Pi is rebooted
    # Start wc_server
    if [ -x /home/pi/proj_cam/wc_server ]
    then
      su pi -c "cd /home/pi/proj_cam; ./wc_server </dev/null >/dev/null 2>&1 &"
    fi

- install additional development software
  - sudo apt-get install libjpeg8-dev
  - sudo apt-get install libreadline6-dev

- apply usb patch
  - see https://github.com/raspberrypi/linux/issues/618 for information
  - add the folloing to /boot/cmdline.txt, and reboot
      dwc_otg.fiq_fsm_enable=0
  - this seems to fix a webcam failure that occurs when closing and reopening the /dev/video0,
    of course this may not be needed in future versions of the kernel. My kernel is (uname -a)
    "Linux raspberrypi 3.12.28+ #709 PREEMPT Mon Sep 8 15:28:00 BST 2014 armv6l GNU/Linux"

- back on your development system, run the shell script which will copy the source
  code to your Raspberry Pi system, build, and start wc_server; I suggest adding your development
  system's id_rsa.pub to authorized_keys on the raspberry pi
  - cd ~/proj_cam
  - bin/install_raspberry_pi

- back on the Raspberry Pi, check ~/proj_cam/wc_server.log for errors.

At this point, back on your development system, you should be able to add this webcam 
to your account, and run the viewer. 


BUILD AND INSTALL ADMIN_SERVER
==============================

Currently (Jan 2015) I have admin_server running on sthaid-rs.dyndns.org. 
You can use this if you want. 

Or, if you want to run your own admin_server, read on ...

- You will need to host it on a system with a public IP address. 

- Modify ADMIN_SERVER_HOSTNAME in wc.h.

- I use the script bin/install_admin_server to copy the admin_server source to 
  the host and build and restart it.

- Refer to "APPENDIX B /etc/init.d/admin_server" for sample init.d script.


BUILD AND INSTALL VIEWER ON ANDROID DEVICE
==========================================


USAGE
=====

The following assumes you are using the existing admin server, which is running on
sthaid-rs.dyndns.org. This admin server host name is hardcoded in wc.h.

-------------
admin command
-------------

The admin command allows you to administer your webcams. You can create your own 
account, add webcams to your account, rename webcams, delete webcams, and set webcam
access list. Webcams added to your account can be either the Raspberry Pi device running
the webcam server program, or a link to another user's webcam.

The admin command connects to the admin_server, running on host sthaid-rs.dyndns.org.
Once the connection is established, the admin command passes user input text to the 
admin_server, and displays output text received from the admin_server.

Usage tutorial:

If you want to create your own account: 
    $ admin -c -u <username> -p <password>'
or you can start by using the existing demo account as shown below.

Verify access to admin_server by running the admin program (username=demo, password=demo).
    $ admin -u demo -p demo
    demo> help
      ....

The 'ls' command shows webcam 'st_backyard' has been created for user 'demo'. This webcam
is 'online', and is a link to the actual webcam 'steve.backyard'.
    demo> ls
    st_backyard  demo         online  steve.backyard

The 'ls everyone' command displays all users and their webcams. Note that user steve has
a webcam named 'backyard', which is 'online', it's macaddr is '80:1f:02:ee:46:c9', and
access is granted to 'everyone'. Instead of 'everyone', access could be granted to a 
comma seperated list of users, for example 'demo,bill,sally'
    demo> ls everyone
    USER: steve
    computer     steve        online  80:1f:02:d3:9f:0c                      
    backyard     steve        online  80:1f:02:ee:46:c9 everyone             
    dining       steve        online  80:1f:02:d3:9f:0b                      
    USER: demo
    st_backyard  demo         online  steve.backyard

To exit admin use 'exit', or ^d.
    demo> exit

Suppose you have brought up a new Raspberry Pi webcam server. The admin command 
'ls unclaimed' lists webcams that do not have an owner, yours should be listed. You 
can then add this webcam to your account.
    $ admin -c -u sally -p sally_passwd
    account sally created
    Terminated

    $ admin -u sally -p sally_passwd
    sally> ls unclaimed
    ---          ---          online  80:1f:02:d3:9f:0a                      
    sally> add_wc basement 80:1f:02:d3:9f:0a
    sally> ls
    basement     sally        online  80:1f:02:d3:9f:0a                      
    sally> exit

-------------------------------------------
username and password environment variables
-------------------------------------------

Some of the client programs (admin, loginwc, and nettest_to_wc) will attempt to get the 
username and password from environment variables. If you have set these environment variables 
then you will not need to supply the username and password on the cmd line. For example:
    $ export WC_USERNAME=sally
    $ export WC_PASSWORD=sally_passwd
    $ admin
    sally> 

--------------
viewer command
--------------

The viewer program is designed to run on Linux, and on Android. The same source code
file, viewer.c, is used for both. Because of this, their are no command line arguments
to viewer. 

User controls viewer by clicking on blue text, or by clicking on a webcam image to make
that image larger or smaller. When entering username and password keyboard input is also
supported.

The viewer can display images from up to 4 webcams simultaneously. Viewer operates in either
LIVE or PLAYBACK mode. 

There is a Configuration Submode (CONFIG) which is used to set the username and password, 
and other options.  The CONFIG submode provides the following:
    SERVER CONFIG:
    a) Set Username and Password
    b) Server Check: This validates ability to connect and login to the server, If okayo
       then a list of this user's webcam names is downloaded from the server.
    NETWORK CONFIG:
    a) Set Proxy: The current state of Proxy is displayed. PROXY DISABLED means that the viewer
       establishes a direct connection to each of the Raspberry Pi Webcam Servers. PROXY ENABLED
       means that the imges data being sent from the Raspberry Pi to the Viewer goes through the
       admin_server on sthaid-rs.dyndns.org. PROXY ENABLED uses TCP on HTTP port 80, this allows
       the viewer to be run behind some firewalls.
    TIME CONFIG:
    a) Select Localtime/GMT: The current time display mode is displayed. 
    b) The 'OFF=nnn MS' displays time correction that the viewer applies to the time supplied
       by the Operating System. If your device does have automatic time synchronization then
       the nnn value displayed should be small. Otherwise, the nnn displays the difference
       between the correct time and the time that the OS provides. The correct time is 
       determined by the viewer program via Simple Network Time Protocl (SNTP). The reason
       for this is that for the viewer to work correctly it needs an accurate time base; and
       my Samsung Galaxy Tab4 does not have an option to automatically synchronize time.

The viewer saves its current settings in file .viewer_confg on both Linux and Android so that
they do not need to be entered again on subsequent invocations.

The viewer is preconfigured to login to the demo account, and display the st_backyard
webcam. So, just run 'viewer' and you should see images from the 'backyard' webcam.

----------------
loginwc command
----------------

The loginwc command provides the ability to login to the Raspberry Pi. Using ssh is
usually preferable; however loginwc can be used when ssh connections can not be established.

Loginwc uses the same method to connect to the Raspberry Pis as does the viewer progam.

For example:
    $ loginwc -u sally -p sally_passwd basement
    raspberrypi login: pi
    Password: 
    Last login: Wed Jan 14 20:15:02 EST 2015 on pts/0
    Linux raspberrypi 3.12.28+ #709 PREEMPT Mon Sep 8 15:28:00 BST 2014 armv6l
    pi@raspberrypi ~ $ exit

The -P option can be used to route the connection through the proxy server 
(same as PROXY ENABLED in the viewer program described above).

--------------------------------------------------
nettest_to_admin_server and nettest_to_wc commands
--------------------------------------------------

These programs are used to help debug network issues.

Nettest_to_admin_server usage example:
    $ nettest_to_admin_server -u root -p xxxxxxxx
    Starting network speed test to sthaid-rs.dyndns.org

    ClientToServer    ServerToClient
      (Mbit/Sec)        (Mbit/Sec)  
             6                19
                 ........
             6                18
        ------            ------
           6.4              19.2

Nettest_to_wc usage example:
    $ nettest_to_wc -u sally -p sally_passwd basement
    Starting network speed test, webcam basement
    network data is being sent directly to the webcam.
                                                    Peer  Peer  
                Sent  Recvd Sent  Recvd Resnd RcvDp Resnd RcvDp 
    Send  Recv  Data  Data  Ack   Ack   Data  Data  Data  Data  
    Mb/S  Mb/S  Dgram Dgram Dgram Dgram Dgram Dgram Dgram Dgram 
    recv
    nettest recv datalen is now 100000
    0.0  19.4     0 17410  3482     0     0     0     0     0
    0.0  18.6     0 16807  3361     0     0     0     0     0
    .....



SOURCE CODE FILES AND POINTERS TO SAMPLE CODE
=============================================




XXX
SDL
udp hole punching
loginwc
sntp
motion
video for linux
jpeg decode
proxy server
android


P2P
===

ISSUES
======

not using java

not using pure SDL

XXX

password

only tested with Logictech C300 Webcam


FUTURE DEVELOPMENT
==================

At this time, I have no plans to do any further work on this project.

...
H264

Password

XXX issues

JPEG Decode Failure

Audio

Pan and Tilt Control



APPENDIX A - ANDROID DEVELOPMENT
================================








APPENDIX B /etc/init.d/admin_server
===================================

#!/bin/sh

# chkconfig: 3 90 10

# install instructions ...
# 
# create this file in /etc/init.d/admin_server
# chkconfig --add admin_server
# service admin_server start

dir=/home/haid/proj_cam
prog=admin_server
retval=0

start() {
        if ps -f -C $prog | grep $dir >/dev/null 2>&1; then
          echo Already running
        else
          echo "Starting $prog"
          cd $dir
          $dir/$prog </dev/null >/dev/null 2>&1 &
        fi
}

stop() {
        echo  "Stopping $prog"
        killall $dir/$prog
}

case "$1" in
        start)
                start
                ;;
        stop)
                stop
                ;;
        restart)
                stop
                start
                ;;
        status)
                if ps -f -C $prog | grep $dir >/dev/null 2>&1; then
                  echo Running
                else
                  echo Stopped
                fi
                ;;
        *)
                echo "Usage: $0 {start|stop|status}"
                retval=1
                ;;
esac
exit $retval


