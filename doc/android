TODO 
----

- port viewer to SDL2

- poer viewer to android
  - rethink util.c logging
  - download jpeglibturbo

- RW FILE
   use assets directory

    AAssetManager* mgr = AAssetManager_fromJava(env, assetManager);
    AAsset* asset = AAssetManager_open(mgr, (const char *) js, AASSET_MODE_UNKNOWN);
    if (NULL == asset) {
        __android_log_print(ANDROID_LOG_ERROR, NF_LOG_TAG, "_ASSET_NOT_FOUND_");
        return JNI_FALSE;
    }
    long size = AAsset_getLength(asset);
    char* buffer = (char*) malloc (sizeof(char)*size);
    AAsset_read (asset,buffer,size);
    __android_log_print(ANDROID_LOG_ERROR, NF_LOG_TAG, buffer);
    AAsset_close(asset);

    # for native asset manager
    LOCAL_LDLIBS    += -landroid

    #include <android/asset_manager.h>

- scripts
  - write my own build script, check for errors after each step
  - logcat

- change the minimum platform
     - find link to documntation for platform revs and
       understand the min max meaning

- my ip addr problem on the Dell

- misc
  - lock streaming texture

LATER
-----
- why is t1 so slow


DONE
---
- load SDL2
- sample programs in SDL2
  - on fedora
  - on tablet
- update t1 to log to a file
- shoud I use static linking  - dynamic should be okay
- what libraries are already available for jpeg

=========== =========== =========== =========== =========== =========== =========== ===========
=========== =========== =========== =========== =========== =========== =========== ===========
=========== =========== =========== =========== =========== =========== =========== ===========

INSTALL ANDROID DEVEL SDK
-------------------------

a) java
  yum install java-1.7.0-openjdk-devel ant

b) 32 bit libraries
  yum install glibc.i686 glibc-devel.i686 libstdc++.i686 zlib-devel.i686 ncurses-devel.i686 \
              libX11-devel.i686 libXrender.i686 libXrandr.i686

c) Download Eclipse ADT with the Android SDK for Linux
  http://developer.android.com/sdk/index.html

  cd ~
  unzip ~/Downloads/adt-bundle-linux-x86_64-20140702.zip 

d) Add the following to PATH
  /home/haid/adt-bundle-linux-x86_64-20140702/sdk/tools
  /home/haid/adt-bundle-linux-x86_64-20140702/sdk/platform-tools

e) Update SDK
  run "android sdk", and install the following
  - Tools
   . Android SDK Tools
   . Android SDK Platform-tools
   . Android SDK Build-tools (highest version)
  - Android 5.0 API 21
   . SDK Platform
   . ARM System Image   (this is for the emulator)
  - Extras
   . Android Support Library

f) export ANDROID_HOME
  ANDROID_HOME=/home/haid/adt-bundle-linux-x86_64-20140702/sdk
  export ANDROID_HOME


INSTALL ANDROID DEVEL NDK
-------------------------

a) download NDK
  goto http://developer.android.com/tools/sdk/ndk/index.htm
  download android-ndk-r10c-linux-x86_64.bin

b) install
  chmod 755 android-ndk-r10c-linux-x86_64.bin
  ./android-ndk-r10c-linux-x86_64.bin     (self extracting)

c) Add the following to PATH
   /home/haid/android-ndk-r10c

d) configure eclipse  
  . NOTE: PREFERENCES > ANDROID > NDK : DOES NOT EXIST
  . Open Preferences.
  . In the pane on the left side of the Preferences window, select Android > NDK. 
    The Android section expands, revealing a number of subsections.
  . Select NDK. In the pane on the right side of the Preferences window, browse to the 
    directory that contains the NDK.  Click OK to return to the Package Explorer display.


USING ECLIPSE IDE
-----------------

a) Running eclipse
  /home/haid/adt-bundle-linux-x86_64-20140702/eclipse/eclipse
     OR
  alias eclipse='/home/haid/adt-bundle-linux-x86_64-20140702/eclipse/eclipse
  eclipse

b) Building in eclipse
  Run Eclipse, Open Project, Select Run


BUILDING NDK APPS WITH CMD LINE
-------------------------------

Here's the general outline of how you work with the NDK tools:

- Place your native sources under <project>/jni/...

- Create <project>/jni/Android.mk to describe your native sources to the NDK build system
  Optional: Create <project>/jni/Application.mk.

- Build your native code by running the 'ndk-build' script from your project's directory. 
  It is located in the top-level NDK directory: 
    . cd <project> 
    . <ndk>/ndk-build
  The build tools copy the stripped, shared libraries needed by your application 
  to the proper location in the application's project directory.

- Finally, compile your application using the SDK tools in the usual way. The SDK build tools will 
  package the shared libraries in the application's deployable .apk file.

- Summary
    Samples can be simply copied to the workspace. Importing into eclipse will
    update eclipse metadata so that eclipse can manage the project.

    One Time ...
      . delete build.xml if it already exists
      . android list targets
      . android update project --target 1 --path .

    Build
      . ndk-build
      . ant debug                               # -q for quiet
      . adb install -r bin/HelloJni-debug.apk   # or 'ant install'

    Clean
      . ndk-build clean
      . ant clean
      . TBD what about removing libs and objs


SETTING UP MY PROJECT
---------------------

# download SDL2 and SDL2_ttf from
  . http://www.libsdl.org/hg.php
  . https://www.libsdl.org/projects/SDL_ttf

# expand the SDL2 and SDL2_ttf 
cd ~
tar -xvf Downloads/SDL2-2.0.3.tar.gz
tar -xvf Downloads/SDL2_ttf-2.0.12.tar.gz

# get copy of libjpeg source, and remove the git metadata
cd ~
git clone https://github.com/folecr/jpeg8d
rm -rf jpeg8d/.git

# copy the template android-project into proj_cam
cd ~/proj_cam
cp -r ~/SDL2-2.0.3/android-project/ .

# move the SDL2, SDL2_ttf, and libjpeg source code directories to jni
cd ~/proj_cam/android_project
mv ~/SDL2-2.0.3      jni
mv ~/SDL2_ttf-2.0.12 jni
mv ~/jpeg8d          jni

# update AndroidManifest
cd ~/proj_cam/android_project
vi AndroidManifest.xml
  change android:minSdkVersion to 19
  delete android:targetSdkVersion

# update java shim
cd ~/proj_cam/android_project
vi src/org/libsdl/app/SDLActivity.java
  change the code starting with "// Load the .so", to
    static {
        System.loadLibrary("SDL2");
        System.loadLibrary("SDL2_ttf");
        System.loadLibrary("jpeg");
        System.loadLibrary("main");
    }

# build only the armeabi-v7a
cd ~/proj_cam/android_project/jni
vi Application.mk
  set APP_ABI := armeabi-v7a

# convert libjpeg from static to shared library 
cd ~/proj_cam/android_project/jni/jpeg8d
cp Android.mk Android_static.mk
vi Android.mk
  convert to shared library make

# setup the jni/src directory
cd ~/proj_cam/android_project/jni/src
rm Android_static.mk
ln -s ../../../viewer.c .
ln -s ../../../p2p1.c .
ln -s ../../../p2p2.c .
ln -s ../../../util.c .
ln -s ../../../jpeg_decode.c .
ln -s ../../../wc.h .
vi Android.mk, update as follows ...
   LOCAL_C_INCLUDES := $(LOCAL_PATH)/$(SDL_PATH)/include \
                       $(LOCAL_PATH)/$(SDL_TTF_PATH) \
                       $(LOCAL_PATH)/$(JPEG_PATH)
   LOCAL_SRC_FILES := $(SDL_PATH)/src/main/android/SDL_android_main.c \
                      viewer.c
   LOCAL_SHARED_LIBRARIES := SDL2 SDL2_ttf jpeg

# remove and recreate build.xml
rm build.xml
android update project --target 1 --path .

# add android-project to git
cd ~/proj_cam
git add android-project
git commit --all
git push


GIT USAGE
---------

 git clone haid@sthaid-rs.dyndns.org:proj_cam.git
 git clone ssh://haid@sthaid-rs.dyndns.org:443/~haid/proj_cam.git



xxxxxxxxxxxxxxxx left off here xxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxx left off here xxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxx left off here xxxxxxxxxxxxxxxxx
   - - - -  Adding SDL2 and SDL2_ttf  - - - - 

- Documentation
  http://wiki.libsdl.org/moin.fcg/MigrationGuide 

- to develop on fedora linux using SDL2 and SDL2_ttf 
  . yum install SDL2-devel SDL2_ttf-devel

- Adding SDL2 library to jni ...
  . tar -xvf Downloads/SDL2-2.0.3.tar.gz
  . Read README-android.txt
  . ln -s ~/SDL2-2.0.3 workspace/android-project

- Adding SDL2_ttf to jni
  . uncomment line in workspace/android-project/src/org/libsdl/app/SDLActivity.java
       System.loadLibrary("SDL2_ttf");

   - - - -  Adding jpeglibturbo  - - - - - - - 

- refer to http://stackoverflow.com/questions/12260149/libjpeg-turbo-for-android
- downoad from 
    git clone git://git.linaro.org/people/tomgall/libjpeg-turbo/libjpeg-turbo.git -b linaro-android
- symlink into jni
- edit jni/Application.mk, 
   set  APP_ABI := armeabi-v7a



COMMAND LINE OVERVIEW
---------------------

Install
 - android sdk   # manges installed components

Help
 - android help

Emulator
 - android avd                                 # manage emulator
 - emulator64-arm -avd android21 -scale 0.32   # runs the emulator
 - android list avd                            # Lists existing Android Virtual Devices.
 - android list targets                        # Lists available targets
 - android update project --target 1 --path .  # update project (creates build.xml needed by ant)

Android Debug Bridge
 - adb  options
    -d  : use usb device
    -e  : use emulator

  adb help
  adb shell [<command>]
  adb install -r  bin/HelloJni.apk       # install app, use -r to replace
  adb uninstall com.example.hellojni     # remove package
  adb logcat                     # view device log
  adb push                       # file xfer, also pull and sync

  killall adb

Ant Build Tool (tool for building java based projects, also called Apache ant)
  ant help
  ant clean
  ant debug
  ant release   (note that release builds must be signed)


ADB SHELL COMMANDS
------------------

General
  ls, mkdir, rmdir, echo, cat, touch, ifconfig, df

  top 
    -m <max_procs>

  ps 
    -t show threads, comes up with threads in the list
    -x shows time, user time and system time in seconds
    -P show scheduling policy, either bg or fg are common
    -p show priorities, niceness level
    -c show CPU (may not be available prior to Android 4.x) involved
    [pid] filter by PID if numeric, or…
    [name] …filter by process name

Logging
  logcat -h
  logcat                  # displays everything
  logcat -s Watchdog:I    # displays log from Watchdog
  logcat -s SDL/APP       # all from my SDL APP

   Priorities are:
       V    Verbose
       D    Debug
       I    Info
       W    Warn
       E    Error
       F    Fatal
       S    Silent (supress all output)
    for example "I" displays Info level and below (I,W,E,F)


Networking
  netconfig
  ifconfig wlan0

Misc
  getprop ro.product.device
  getprop

Proc Filesystem
  cat /proc/<pid>/cmdline

Additional Info



EMULATOR
--------

I used the following options for my android21 virtual device:
  AVD Name:      android21
  Device:        Nexuss 
  Target:        API Lvl 21
  Keyboard:      yes
  Skin:          Skin With Dynamic Hardware Controls
  SD Card        16 MB
  Use Host GPU:  Yes

Run the emulator
  emulator64-arm -avd android21 -scale 0.32

Run App on Emulator
 - adb install
 - eclipse - run


DEBUGGING WITH A DEVICE
-----------------------

Enable Debugging on the device
- Settings > General > Build Number 7 times
- Enable USB Debugging


WEB SITES
---------

Getting Started
  developer.android.com
  developer.android.com/sdk/index.html
  developer.android.com/sdk/installing/adding-packages.html
  developer.android.com/tools/help/sdk-manager.html
  fedoraproject.org/wiki/HOWTO_Setup_Android_Development

Building First App
  developer.android.com/training/basics/firstapp   -> 'start first lesson'
  developer.android.com/training/basics/firstapp/creating-project.html
  developer.android.com/training/basics/firstapp/running-app.html
  developer.android.com/training/basics/firstapp/building-ui.html

Layouts
  developer.android.com/guide/topics/ui/declaring-layout.html

===============================================================
===============================================================
====================   OLD   ==================================
===============================================================
===============================================================



android create project --target 1 --name MyFirstApp --path $HOME/workspace/MyFirstApp --activity MainActivity --package com.example.myfirstapp

Update AndroidManifest.xml, add ...
   <uses-sdk android:minSdkVersion="19" android:targetSdkVersion="19" />

   where android:targetSdkVersion -  An integer designating the API Level that the application 
   targets. If not set, the default value equals that given to minSdkVersion.
   This attribute informs the system that you have tested against the target version and the system 
   should not enable any compatibility behaviors to maintain your app's forward-compatibility with 
   the target version. The application is still able to run on older versions (down to minSdkVersion).

Files
  AndroidManifest.xml - fundamental characteristics of the app
  src/                - Directory for your app's main source files. 
                        It includes an Activity class that runs when your app is 
                        launched using the app icon.
  res/                - Contains several sub-directories for app resources. Here are just a few:
    drawable-hdpi/    - Directory for drawable objects for high density screens.
    layout/           - Directory for files that define your app's user interface.
    values/           - Directory for other various XML files that contain a collection of 
                        resources, such as string and color definitions.

