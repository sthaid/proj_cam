yum install SDL2_mixer-devel
http://www.libsdl.org/projects/SDL_mixer/
where I got the beep
beep converter


https://github.com/kmackay/android-ifaddrs/blob/master/ifaddrs.c

-------------

void Java_com_mypackage_MyClass_MyMethod(JNIEnv *jniEnv, jobject thiz)
{
    jclass *clazz = (*(*jniEnv)->FindClass)(jniEnv, "com/mypackage/SomeClass");
    jmethodID MethodID = (*(*jniEnv)->GetStaticMethodID)(jniEnv, clazz, "SomeMethod", "(I)I");
    int result = (*(*jniEnv)->CallStaticIntMethod)(jniEnv, clazz, MethodID, 18);
kk

javah -classpath  android-sdk/platforms/android-21/android.jar  -o xx.h android.media.ToneGenerator

/home/haid/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-nm

 ToneGenerator tg = new ToneGenerator(AudioManager.STREAM_RING, 100);
 tg.startTone(ToneGenerator.TONE_PROP_BEEP);

================

TODO 
----

VIEWER TODO

- beep on select

- clean up the changes I've made so far
  - recheck where printf used

- figure out problem with display proc, and probably need to rewrite
  - lock streaming texture (if this is needed)

- build with p2p2.c, 

- store settings in file
  - initialize username and password if not present
  - detect login failure

- select webcam name via drop down list

- control pane
  - the control buttons are 2 close togethor and the font too small
    - optimize for Android, then try working with same confg on PC screen
  - review the controls
  - need to be able to also control some config, such as
     username, password, zoom, zulu, protocol
  - can I bring over the same font, and put in assets dir
  - review how often rendertext is called for both live and playback

- font, use the large font everywhere
  - problem with rendertext going off of the end
  - make rendertext a procedure

- test with 4 cams

- change ICON




--------------------------------------------------------------


- RW FILE
   - Refer to SDL readme
   - use assets directory
   - NDK ...
       AAssetManager* mgr = AAssetManager_fromJava(env, assetManager);
       AAsset* asset = AAssetManager_open(mgr, (const char *) js, AASSET_MODE_UNKNOWN);
       if (NULL == asset) {
           __android_log_print(ANDROID_LOG_ERROR, NF_LOG_TAG, "_ASSET_NOT_FOUND_");
           return JNI_FALSE;
       }
       long size = AAsset_getLength(asset);
       char* buffer = (char*) malloc (sizeof(char)*size);
       AAsset_read (asset,buffer,size);
       __android_log_print(ANDROID_LOG_ERROR, NF_LOG_TAG, buffer);
       AAsset_close(asset);

       # for native asset manager
       LOCAL_LDLIBS    += -landroid

       #include <android/asset_manager.h>

- my ip addr problem on the Dell


=========== =========== =========== =========== =========== =========== =========== ===========
=========== =========== =========== =========== =========== =========== =========== ===========
=========== =========== =========== =========== =========== =========== =========== ===========

TABLE OF CONTENTS
=================

INSTALL ANDROID DEVEL SDK
INSTALL ANDROID DEVEL NDK
BUILDING NDK APPS WITH CMD LINE
ANDROID PROJECT
SETTING UP MY PROJECT
SDL NOTES
LIBJPEG NOTES
COMMAND LINE USAGE   
ADB SHELL COMMANDS
GIT NOTES
EMULATOR
USING ECLIPSE IDE
DEBUGGING WITH A DEVICE
WEB SITES



INSTALL ANDROID DEVEL SDK
-------------------------

a) install java and ant
  yum install java-1.7.0-openjdk-devel ant

b) install 32 bit libraries
  yum install glibc.i686 glibc-devel.i686 libstdc++.i686 zlib-devel.i686 ncurses-devel.i686 \
              libX11-devel.i686 libXrender.i686 libXrandr.i686

c) Download Eclipse ADT with the Android SDK for Linux
  http://developer.android.com/sdk/index.html
  cd ~
  unzip ~/Downloads/adt-bundle-linux-x86_64-20140702.zip 
  ln -s adt-bundle-linux-x86_64-20140702/sdk android-sdk

d) Add the following to PATH
  $HOME/android-sdk/tools
  $HOME/android-sdk/platform-tools

e) export ANDROID_HOME
  ANDROID_HOME=/home/haid/adt-bundle-linux-x86_64-20140702/sdk
  export ANDROID_HOME

f) Update SDK
  run "android sdk", and install the following
  - Tools
   . Android SDK Tools
   . Android SDK Platform-tools
   . Android SDK Build-tools (highest version)
  - Android 5.0 API 21
   . SDK Platform
   . ARM System Image   (this is for the emulator)
  - Extras
   . Android Support Library


INSTALL ANDROID DEVEL NDK
-------------------------

a) download NDK and install, the install file is self extracting
  http://developer.android.com/tools/sdk/ndk/index.htm
   . download android-ndk-r10c-linux-x86_64.bin
  cd ~
  chmod 755 Download/android-ndk-r10c-linux-x86_64.bin
  Downloads/android-ndk-r10c-linux-x86_64.bin
  ln -s android-ndk-r10c android-ndk

c) Add the following to PATH
   $HOME/android-ndk

note: earlier ndk versions are available ...
  . http://dl.google.com/android/ndk/android-ndk-r9-linux-x86_64.tar.bz2
  . http://dl.google.com/android/ndk/android-ndk-r9d-linux-x86_64.tar.bz2
  . etc


BUILDING NDK APPS WITH CMD LINE
-------------------------------

Here's the general outline of how you work with the NDK tools:

- Place your native sources under <project>/jni/...

- Create <project>/jni/Android.mk to describe your native sources to the NDK build system
  Optional: Create <project>/jni/Application.mk.

- Build your native code by running the 'ndk-build' script from your project's directory. 
  It is located in the top-level NDK directory: 
    . cd <project> 
    . <ndk>/ndk-build
  The build tools copy the stripped, shared libraries needed by your application 
  to the proper location in the application's project directory.

- Finally, compile your application using the SDK tools in the usual way. The SDK build tools will 
  package the shared libraries in the application's deployable .apk file.

- Summary
    Samples can be simply copied to the workspace. Importing into eclipse will
    update eclipse metadata so that eclipse can manage the project.

    One Time ...
      . delete build.xml if it already exists
      . android list targets
      . android update project --target 1 --path .

    Build
      . ndk-build
      . ant debug                               # -q for quiet
      . adb install -r bin/HelloJni-debug.apk   # or 'ant install'


ANDROID PROJECT
---------------

AndroidManifest.xml
   <uses-sdk android:minSdkVersion="19" android:targetSdkVersion="19" />

   where android:targetSdkVersion -  An integer designating the API Level that the application 
   targets. If not set, the default value equals that given to minSdkVersion.
   This attribute informs the system that you have tested against the target version and the 
   system should not enable any compatibility behaviors to maintain your app's 
   forward-compatibility with the target version. The application is still able to run on 
   older versions (down to minSdkVersion).


SETTING UP MY PROJECT
---------------------

# download SDL2 and SDL2_ttf from
  . http://www.libsdl.org/hg.php
  . https://www.libsdl.org/projects/SDL_ttf

# expand the SDL2 and SDL2_ttf 
cd ~
tar -xvf Downloads/SDL2-2.0.3.tar.gz
tar -xvf Downloads/SDL2_ttf-2.0.12.tar.gz

# get copy of libjpeg source, and remove the git metadata
cd ~
git clone https://github.com/folecr/jpeg8d
rm -rf jpeg8d/.git

# copy the template android-project into proj_cam
cd ~/proj_cam
cp -r ~/SDL2-2.0.3/android-project/ .

# move the SDL2, SDL2_ttf, and libjpeg source code directories to jni
cd ~/proj_cam/android_project
mv ~/SDL2-2.0.3      jni
mv ~/SDL2_ttf-2.0.12 jni
mv ~/jpeg8d          jni

# update AndroidManifest
cd ~/proj_cam/android_project
vi AndroidManifest.xml
  change android:minSdkVersion to 19
  delete android:targetSdkVersion

# update java shim
cd ~/proj_cam/android_project
vi src/org/libsdl/app/SDLActivity.java
  change the code starting with "// Load the .so", to
    static {
        System.loadLibrary("SDL2");
        System.loadLibrary("SDL2_ttf");
        System.loadLibrary("jpeg");
        System.loadLibrary("main");
    }

# build only the armeabi-v7a
cd ~/proj_cam/android_project/jni
vi Application.mk
  set APP_ABI := armeabi-v7a
  APP_PLATFORM := android-19

# convert libjpeg from static to shared library 
cd ~/proj_cam/android_project/jni/jpeg8d
cp Android.mk Android_static.mk
vi Android.mk
  convert to shared library make

# setup the jni/src directory
cd ~/proj_cam/android_project/jni/src
rm Android_static.mk
ln -s ../../../viewer.c .
ln -s ../../../p2p1.c .
ln -s ../../../p2p2.c .
ln -s ../../../util.c .
ln -s ../../../jpeg_decode.c .
ln -s ../../../wc.h .
vi Android.mk, update as follows ...
   LOCAL_C_INCLUDES := $(LOCAL_PATH)/$(SDL_PATH)/include \
                       $(LOCAL_PATH)/$(SDL_TTF_PATH) \
                       $(LOCAL_PATH)/$(JPEG_PATH)
   LOCAL_SRC_FILES := $(SDL_PATH)/src/main/android/SDL_android_main.c \
                      viewer.c
   LOCAL_SHARED_LIBRARIES := SDL2 SDL2_ttf jpeg

# remove and recreate build.xml
rm build.xml
android update project --target 1 --path .

# add android-project to git
cd ~/proj_cam
git add android-project
git commit --all
git push


SDL NOTES
---------

- SDL Documentation
  - https://wiki.libsdl.org/APIByCategory
  - http://wiki.libsdl.org/moin.fcg/MigrationGuide 

- SDL2 and SDL2_ttf Download and Install in App
  - https://www.libsdl.org/download-2.0.php
  - https://www.libsdl.org/projects/SDL_ttf/
  - place the downloaded directories under jni
  - be sure the Android.mk in these directories is for shared libraries
  - update src/org/libsdl/app/SDLActivity.java to load the shared libraries
  
- NOTE: to develop using SDL on fedora linux using SDL2 and SDL2_ttf 
  . yum install SDL2-devel SDL2_ttf-devel


LIBJPEG NOTES
-------------

- JPEG8D Download and Install in App
  - get copy of libjpeg source, and optionally remove the git metadata
      git clone https://github.com/folecr/jpeg8d
      rm -rf jpeg8d/.git    (optional)
  - place the source dir undir jni
  - be sure the Android.mk in this directory is for shared libraries
  - update src/org/libsdl/app/SDLActivity.java to load the shared libraries


COMMAND LINE USAGE   
------------------

Install
 - android sdk   # manages installed components

Help
 - android help

Project
 - android create project --target 1 --name MyFirstApp --path $HOME/workspace/MyFirstApp \
                           --activity MainActivity --package com.example.myfirstapp

Emulator
 - android avd                                 # manage emulator
 - emulator64-arm -avd android21 -scale 0.32   # runs the emulator
 - android list avd                            # Lists existing Android Virtual Devices.
 - android list targets                        # Lists available targets
 - android update project --target 1 --path .  # update project (creates build.xml needed by ant)

Android Debug Bridge
 - adb  options
    -d  : use usb device
    -e  : use emulator

  adb help
  adb shell [<command>]
  adb install -r  bin/HelloJni.apk       # install app, use -r to replace
  adb uninstall com.example.hellojni     # remove package
  adb logcat                     # view device log
  adb push                       # file xfer, also pull and sync

  killall adb

Ant Build Tool (tool for building java based projects, also called Apache ant)
  ant help
  ant clean
  ant debug
  ant release   (note that release builds must be signed)


ADB SHELL COMMANDS
------------------

General
  ls, mkdir, rmdir, echo, cat, touch, ifconfig, df

  top 
    -m <max_procs>

  ps 
    -t show threads, comes up with threads in the list
    -x shows time, user time and system time in seconds
    -P show scheduling policy, either bg or fg are common
    -p show priorities, niceness level
    -c show CPU (may not be available prior to Android 4.x) involved
    [pid] filter by PID if numeric, or…
    [name] …filter by process name

Logging
  logcat -h
  logcat                  # displays everything
  logcat -s Watchdog:I    # displays log from Watchdog
  logcat -s SDL/APP       # all from my SDL APP

   Priorities are:
       V    Verbose
       D    Debug
       I    Info
       W    Warn
       E    Error
       F    Fatal
       S    Silent (supress all output)
    for example "I" displays Info level and below (I,W,E,F)


Networking
  netconfig
  ifconfig wlan0

Misc
  getprop ro.product.device
  getprop

Proc Filesystem
  cat /proc/<pid>/cmdline

Additional Info


GIT NOTES
---------

 git clone haid@sthaid-rs.dyndns.org:proj_cam.git
 git clone ssh://haid@sthaid-rs.dyndns.org:443/~haid/proj_cam.git


EMULATOR
--------

I used the following options for my android21 virtual device:
  AVD Name:      android21
  Device:        Nexuss 
  Target:        API Lvl 21
  Keyboard:      yes
  Skin:          Skin With Dynamic Hardware Controls
  SD Card        16 MB
  Use Host GPU:  Yes

Run the emulator
  emulator64-arm -avd android21 -scale 0.32

Run App on Emulator
 - adb install
 - eclipse - run


USING ECLIPSE IDE
-----------------

a) configure eclipse  to use NDK
  . NOTE: I wasn't able to get this to work because 
    'Preferences > Android > NDK' does not exist
  . Open Preferences.
  . In the pane on the left side of the Preferences window, select Android > NDK. 
    The Android section expands, revealing a number of subsections.
  . Select NDK. In the pane on the right side of the Preferences window, browse to the 
    directory that contains the NDK.  Click OK to return to the Package Explorer display.

b) Running eclipse
  alias eclipse='/home/haid/adt-bundle-linux-x86_64-20140702/eclipse/eclipse
  eclipse

b) Building in eclipse
  Run Eclipse, Open Project, Select Run


DEBUGGING WITH A DEVICE
-----------------------

Enable Debugging on the device
- Settings > General > Build Number 7 times
- Enable USB Debugging


WEB SITES
---------

Getting Started
  developer.android.com
  developer.android.com/sdk
  developer.android.com/tools/help
  fedoraproject.org/wiki/HOWTO_Setup_Android_Development

Building First App
  developer.android.com/training/basics/firstapp

Layouts
  developer.android.com/guide/topics/ui/declaring-layout.html

